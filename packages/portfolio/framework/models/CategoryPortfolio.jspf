<%!
    public static class CategoryPortfolio {
        public static final String FORM_NAME = "KS_RQT_ServiceItemCategory";
        public static final String FIELD_DESCRIPTION = "700401901";
        public static final String FIELD_ID = "179";
        public static final String FIELD_IMAGE_TAG = "700401930";
        public static final String FIELD_NAME = "700401900";
        public static final String FIELD_NUMBER_OF_ITEMS = "700401940";

        public static final String FIELD_CATALOG = "600000500";
        public static final String FIELD_SORT_ORDER = "700061010";
        public static final String FIELD_STATUS = "7";
        public static final String[] FIELD_IDS = new String[]{
            FIELD_DESCRIPTION, FIELD_ID, FIELD_IMAGE_TAG, FIELD_NAME, FIELD_NUMBER_OF_ITEMS, FIELD_STATUS};
        public static final String[] SORT_FIELD_IDS = new String[]{
            FIELD_SORT_ORDER, FIELD_NAME};

        private String name;
        private SimpleEntry entry = null;
        private List<CategoryPortfolio> subcategories = new ArrayList();
        private List<TemplatePortfolio> templates = new ArrayList();

        public CategoryPortfolio(SimpleEntry entry) {
            this.entry = entry;
        }
        
        public static CategoryPortfolio[] findByCatalogName(HelperContext context, String catalogName) {
            CategoryPortfolio[] results = new CategoryPortfolio[0];

            String qualification = "'"+FIELD_CATALOG+"' = \""+catalogName+"\"";

            SimpleEntry[] entries = ArsBase.find(context, FORM_NAME, qualification, FIELD_IDS, SORT_FIELD_IDS);
            if (entries != null && entries.length > 0) {
                results = new CategoryPortfolio[entries.length];
                for(int i=0;i<results.length;i++) {
                    results[i] = new CategoryPortfolio(entries[i]);
                }
            }

            return results;
        }

        public void addSubcategory(CategoryPortfolio category) {
            subcategories.add(category);
        }
        public CategoryPortfolio[] getSubcategories() {
            return subcategories.toArray(new CategoryPortfolio[subcategories.size()]);
        }

        public void addTemplate(TemplatePortfolio template) {
            templates.add(template);
        }
        public TemplatePortfolio[] getTemplates() {
            return templates.toArray(new TemplatePortfolio[templates.size()]);
        }
        public boolean hasTemplates() {
            boolean hasTemplates = false;
            if (templates.size() > 0) {
                hasTemplates = true;
            } else {
                for (CategoryPortfolio category : getSubcategories()) {
                    if (category.hasTemplates()) {
                        hasTemplates = true;
                        break;
                    }
                }
            }
            return hasTemplates;
        }
        public boolean hasSubcategories() {
            return subcategories.size() > 0;
        }
        public boolean hasNonEmptySubcategories() {
            boolean result = false;
            for (CategoryPortfolio subcategory : getSubcategories()) {
                if (subcategory.hasTemplates()) {
                    result = true;
                    break;
                }
            }
            return result;
        }

        public String getDescription() { return entry.getEntryFieldValue(FIELD_DESCRIPTION); }
        public String getFullName() {return entry.getEntryFieldValue(FIELD_NAME);}
        public String getId() {return entry.getEntryFieldValue(FIELD_ID);}
        public String getStatus() {return entry.getEntryFieldValue(FIELD_STATUS);}
        public String getImageTag() {return entry.getEntryFieldValue(FIELD_IMAGE_TAG);}
        public String getName() {
            if (name == null) {
                String[] trail = getNameTrail();
                name = trail[trail.length-1];
            }
            return name;
        }
        public String[] getNameTrail() {
            return entry.getEntryFieldValue(FIELD_NAME).split(" :: ");
        }
        public String getParentName() {
            StringBuilder result = new StringBuilder();
            String[] trail = getNameTrail();
            if (trail.length > 1) {
                for (int i=0;i<trail.length-1;i++) {
                    if (i!=0) result.append(" :: ");
                    result.append(trail[i]);
                }
            }
            return result.toString();
        }
    }
%>