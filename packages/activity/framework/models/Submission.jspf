<%!
    public static class SubmissionKlean {
        public static final String FORM_NAME = "KS_SRV_CustomerSurvey";
        public static final String FIELD_CATALOG_NAME = "600000500";
        public static final String FIELD_CREATE_DATE = "3";
        public static final String FIELD_ID = "179";
        public static final String FIELD_NOTES = "600003021";
        public static final String FIELD_REQUEST_ID = "536870913";
        public static final String FIELD_SUBMIT_TYPE = "700088475";
        public static final String FIELD_SUBMITTER = "2";
        public static final String FIELD_TEMPLATE_ID = "700000800";
        public static final String FIELD_TEMPLATE_NAME = "700001000";
	public static final String FIELD_REQUEST_CLOSED_DATE = "700088489";
        public static final String FIELD_LOOKUP_ID = "700002450";
        public static final String FIELD_ORIGINATING_ID = "600000310";

        // Represents the status of the SubmissionKlean.
        public static final String FIELD_STATUS = "7";
        // Represents the status of the Request including task workflow (This is
        // a Enumeration field that allows values of 'Open' or 'Closed' and is
        // typically set by the KineticRequest_Submission_Close handler).
        public static final String FIELD_REQUEST_STATUS = "700089541";
        // Represents the state of the Request (This is a free text field that
        // is intended to communicate the overall progress of the Request.  This
        // value is typically set by the KineticRequest_Submission_UpdateStatus
        // task handler).
        public static final String FIELD_VALIDATION_STATUS = "700002400";

        public static final String[] FIELD_IDS = new String[] {
            FIELD_CATALOG_NAME, FIELD_CREATE_DATE, FIELD_ID, FIELD_REQUEST_ID,
            FIELD_NOTES, FIELD_SUBMIT_TYPE, FIELD_SUBMITTER, FIELD_TEMPLATE_ID,
            FIELD_TEMPLATE_NAME, FIELD_STATUS, FIELD_REQUEST_STATUS, FIELD_REQUEST_CLOSED_DATE, FIELD_VALIDATION_STATUS};

        private Task[] tasks;
        private Map<String,List<Task>> taskTreeExecutions;

        public static SubmissionKlean[] find(HelperContext context, String qualification) {
            SubmissionKlean[] results = new SubmissionKlean[0];

            SimpleEntry[] entries = ArsBase.find(context, FORM_NAME, qualification, FIELD_IDS);
            if (entries != null && entries.length > 0) {
                results = new SubmissionKlean[entries.length];
                for(int i=0;i<results.length;i++) {
                    results[i] = new SubmissionKlean(entries[i]);
                }
            }

            return results;
        }

        public static SubmissionKlean[] find(HelperContext context, String qualification, String[] sortFields, Integer chunkSize, Integer recordOffset, Integer sortOrder) {
            SubmissionKlean[] results = new SubmissionKlean[0];

            SimpleEntry[] entries = ArsBase.find(context, FORM_NAME, qualification, FIELD_IDS, sortFields, chunkSize, recordOffset, sortOrder);
            if (entries != null && entries.length > 0) {
                results = new SubmissionKlean[entries.length];
                for(int i=0;i<results.length;i++) {
                    results[i] = new SubmissionKlean(entries[i]);
                }
            }

            return results;
        }

        public static SubmissionKlean findByInstanceId(HelperContext context, String id) {
            SubmissionKlean result = null;

            SimpleEntry entry = ArsBase.findByInstanceId(context, FORM_NAME, id, FIELD_IDS);
            if (entry != null) {
                result = new SubmissionKlean(entry);
            }

            return result;
        }

        public static SubmissionKlean[] findRecentByCatalogName(HelperContext context, String catalogName, Integer number) {
            SubmissionKlean[] results = new SubmissionKlean[0];

            String qualification =
                "'"+FIELD_CATALOG_NAME+"' = \""+catalogName+"\" AND "+
                "'"+FIELD_SUBMITTER+"' = \""+context.getUserName()+"\"";

            SimpleEntry[] entries = ArsBase.find(context, FORM_NAME, qualification, FIELD_IDS, number);
            if (entries != null && entries.length > 0) {
                results = new SubmissionKlean[entries.length];
                for(int i=0;i<results.length;i++) {
                    results[i] = new SubmissionKlean(entries[i]);
                }
            }

            return results;
        }
        
        public SubmissionKlean[] getChildren(HelperContext context) {
            String qualification = "'"+FIELD_LOOKUP_ID+"' = \""+getId()+"\" AND '"+FIELD_ID+"' != '"+FIELD_LOOKUP_ID+"'";
            SubmissionKlean[] results = SubmissionKlean.find(context, qualification);
            return results;
        }
        
        public SubmissionKlean[] getDescendents(HelperContext context) {
            String qualification = "'"+FIELD_ORIGINATING_ID+"' = \""+getId()+"\" AND '"+FIELD_ID+"' != '"+FIELD_ORIGINATING_ID+"'";
            SubmissionKlean[] results = SubmissionKlean.find(context, qualification);
            return results;
        }

        public Task[] getTasks(HelperContext context) {
            if (tasks == null) {
                // Retrieve the associated tasks
                tasks = Task.findBySource(context, "Kinetic Request", getId());
            }
            return tasks;
        }

        public Map<String,List<Task>> getTaskTreeExecutions(HelperContext context) {
            if (taskTreeExecutions == null) {
                taskTreeExecutions = new LinkedHashMap();
                Task[] tasks = getTasks(context);
                for (Task task : tasks) {
                    List<Task> treeExecutions = taskTreeExecutions.get(task.getTreeName());
                    if (treeExecutions == null) {
                        treeExecutions = new ArrayList();
                        taskTreeExecutions.put(task.getTreeName(), treeExecutions);
                    }
                    treeExecutions.add(task);
                }
            }
            return taskTreeExecutions;
        }

        private SimpleEntry entry = null;

        public SubmissionKlean(SimpleEntry entry) {
            this.entry = entry;
        }

        public String getCatalogName() {return entry.getEntryFieldValue(FIELD_CATALOG_NAME);}
        public String getCreateDate() {return entry.getEntryFieldValue(FIELD_CREATE_DATE);}
        public String getId() {return entry.getEntryFieldValue(FIELD_ID);}
        public String getNotes() {return entry.getEntryFieldValue(FIELD_NOTES);}
        public String getRequestId() {return entry.getEntryFieldValue(FIELD_REQUEST_ID);}
        public String getSubmitType() {return entry.getEntryFieldValue(FIELD_SUBMIT_TYPE);}
        public String getTemplateId() {return entry.getEntryFieldValue(FIELD_TEMPLATE_ID);}
        public String getTemplateName() {return entry.getEntryFieldValue(FIELD_TEMPLATE_NAME);}
        public String getStatus() {return entry.getEntryFieldValue(FIELD_STATUS);}
        public String getRequestStatus() {return entry.getEntryFieldValue(FIELD_REQUEST_STATUS);}
		public String getRequestClosedDate() {return entry.getEntryFieldValue(FIELD_REQUEST_CLOSED_DATE);}
        public String getValiationStatus() {return entry.getEntryFieldValue(FIELD_VALIDATION_STATUS);}
    }
%>